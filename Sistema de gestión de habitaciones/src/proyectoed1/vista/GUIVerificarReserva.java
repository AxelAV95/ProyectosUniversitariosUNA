/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoed1.vista;

import Atxy2k.CustomTextField.RestrictedTextField;
import com.google.zxing.NotFoundException;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.concurrent.TimeUnit;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectoed1.modelo.datos.Datos;
import proyectoed1.modelo.datos.Globales;
import proyectoed1.modelo.dominio.Cliente;
import proyectoed1.modelo.dominio.Habitacion;
import proyectoed1.modelo.dominio.ListaHabitacion;
import proyectoed1.modelo.dominio.NodoHabitacion;
import proyectoed1.modelo.dominio.NodoReserva;
import proyectoed1.modelo.dominio.Reserva;
import proyectoed1.modelo.negocio.LogicaReserva;

/**
 *
 * @author adeve
 */
public class GUIVerificarReserva extends javax.swing.JFrame {

    private File imagenQR;
    private String reservaid;
    private DefaultTableModel modelHabitaciones = new DefaultTableModel(Globales.columnaHabitacionSeleccionadas, 0);
    private String[] habitacionObtenida;
    private NodoReserva reservaSeleccionada; //variable global para manipular la reserva

    public GUIVerificarReserva() {
        Datos.iniciarListaHabitaciones();
        Datos.iniciarListaReservas();
        Datos.iniciarListaReservasCanceladas();
        this.setContentPane(new JLabel(new ImageIcon(new ImageIcon(Globales.rutaGeneral + "\\src\\proyectoed1\\vista\\icons\\wall1.jpg").getImage().getScaledInstance(931, 638, Image.SCALE_SMOOTH))));
        initComponents();
        numeroReserva.setVisible(false);
        GridLayout grid = new GridLayout(0, 1);
        // grid.setHgap(30);
        panelQR.setLayout(grid);
        panelQR.setPreferredSize(new Dimension(150, 150));
        tablaHabitaciones.setModel(modelHabitaciones);
        cargarComboHabitaciones();
        campoFechaActual.setMinSelectableDate(new Date());
        campoFechaInicio.setMinSelectableDate(new Date());
        campoFechaFin.setMinSelectableDate(new Date());
        descripcionHabitacion.setEditable(false);
        restringirCampos();

    }
    
    public void restringirCampos(){
        RestrictedTextField campo1 = new RestrictedTextField(campoCedula);
        RestrictedTextField campo2 = new RestrictedTextField(campoCliente);
        
        campo1.setOnlyNums(true);
        campo2.setAcceptSpace(true);
        campo2.setOnlyText(true);
        
        
    }
    
    public boolean fechasIguales(Date date1, Date date2) {
        LocalDate localDate1 = date1.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        LocalDate localDate2 = date2.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        return localDate1.isEqual(localDate2);
    }

    public long diferenciaDias(Date d1, Date d2) {
        long diff = d2.getTime() - d1.getTime();
        return TimeUnit.DAYS.convert(diff, TimeUnit.MILLISECONDS);
    }

    public boolean validarFechas() {
        boolean verificar = false;

        if (campoFechaInicio.getDate().after(campoFechaFin.getDate()) || campoFechaFin.getDate().before(campoFechaInicio.getDate()) || fechasIguales(campoFechaInicio.getDate(), campoFechaFin.getDate()) == true) {
            verificar = true;
        }

        return verificar;
    }

    public void cargarComboHabitaciones() {

        NodoHabitacion ne = Datos.getListaHabitaciones().getPrimero();
        while (ne.getSiguiente() != Datos.getListaHabitaciones().getPrimero()) {
            comboHabitaciones.addItem(ne.getHabitacion().getNumHabitacion() + "-" + ne.getHabitacion().getDescripcion());
            ne = ne.getSiguiente();
        }
        comboHabitaciones.addItem(ne.getHabitacion().getNumHabitacion() + "-" + ne.getHabitacion().getDescripcion());

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        seleccionarQRBoton = new javax.swing.JButton();
        panelQR = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        numeroReserva = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        campoCliente = new javax.swing.JTextField();
        campoCedula = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        fechaActual = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        campoFechaActual = new com.toedter.calendar.JDateChooser();
        campoFechaInicio = new com.toedter.calendar.JDateChooser();
        campoFechaFin = new com.toedter.calendar.JDateChooser();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        comboHabitaciones = new javax.swing.JComboBox<String>();
        jLabel9 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descripcionHabitacion = new javax.swing.JTextArea();
        seleccionarHabitacion = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaHabitaciones = new javax.swing.JTable();
        modificarReserva = new javax.swing.JButton();
        removerHabitacion = new javax.swing.JButton();
        cancelarReserva = new javax.swing.JButton();

        jButton1.setText("jButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Verificar QR");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Seleccionar QR:");

        seleccionarQRBoton.setText("Seleccionar...");
        seleccionarQRBoton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarQRBotonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(seleccionarQRBoton)
                .addContainerGap(64, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(seleccionarQRBoton))
                .addContainerGap(32, Short.MAX_VALUE))
        );

        panelQR.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout panelQRLayout = new javax.swing.GroupLayout(panelQR);
        panelQR.setLayout(panelQRLayout);
        panelQRLayout.setHorizontalGroup(
            panelQRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );
        panelQRLayout.setVerticalGroup(
            panelQRLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 117, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        numeroReserva.setText("jLabel2");

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Datos del cliente:");

        jLabel4.setText("Nombre completo:");

        jLabel5.setText("CÃ©dula:");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoCliente)
                            .addComponent(campoCedula, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(campoCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        fechaActual.setText("Fecha actual:");

        jLabel2.setText("Fecha inicial:");

        jLabel6.setText("Fecha final:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaActual)
                    .addComponent(jLabel6)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoFechaActual, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(campoFechaInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(campoFechaFin, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaActual)
                    .addComponent(campoFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(campoFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(campoFechaFin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(numeroReserva)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(numeroReserva)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel6.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel7.setText("Datos de habitaciÃ³n:");

        jLabel8.setText("Habitaciones:");

        comboHabitaciones.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar" }));
        comboHabitaciones.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHabitacionesActionPerformed(evt);
            }
        });

        jLabel9.setText("DescripciÃ³n:");

        descripcionHabitacion.setColumns(20);
        descripcionHabitacion.setRows(5);
        jScrollPane1.setViewportView(descripcionHabitacion);

        seleccionarHabitacion.setText("Seleccionar");
        seleccionarHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarHabitacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboHabitaciones, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(seleccionarHabitacion)
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(comboHabitaciones, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel9)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(seleccionarHabitacion)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablaHabitaciones.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaHabitaciones);

        modificarReserva.setText("Modificar reserva");
        modificarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modificarReservaActionPerformed(evt);
            }
        });

        removerHabitacion.setText("Remover");
        removerHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerHabitacionActionPerformed(evt);
            }
        });

        cancelarReserva.setText("Cancelar reserva");
        cancelarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(modificarReserva)
                        .addGap(37, 37, 37)
                        .addComponent(cancelarReserva, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(removerHabitacion, javax.swing.GroupLayout.Alignment.TRAILING)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removerHabitacion)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(modificarReserva)
                    .addComponent(cancelarReserva))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(69, 475, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(panelQR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelQR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public boolean verificarExistenciaReserva(String reservaid) {
        NodoReserva nr = Datos.getListaReservas().getPrimero();

        while (nr != null) {
            if (nr.getReserva().getNumeroReservacion() == Integer.parseInt(reservaid)) {
                return true;
            }
            nr = nr.getSiguiente();
        }
        return false;
    }

    private void seleccionarQRBotonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarQRBotonActionPerformed
        Datos.resetearListaReservas();
        Datos.iniciarListaReservas();
        modelHabitaciones.setRowCount(0);
        panelQR.removeAll();
        Globales.jc.setDialogTitle("Selecciona las imÃ¡genes..");

        if (Globales.jc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            imagenQR = Globales.jc.getSelectedFile();
            JLabel jlabelpic = new JLabel(new ImageIcon(new ImageIcon(imagenQR.getAbsolutePath()).getImage().getScaledInstance(150, 150, Image.SCALE_DEFAULT)));
            panelQR.add(jlabelpic);

        }

        revalidate();
        repaint();

        try {
            reservaid = Globales.controladorReserva.leerReservaQR(imagenQR.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(GUIVerificarReserva.class.getName()).log(Level.SEVERE, null, ex);
        } catch (NotFoundException ex) {
            Logger.getLogger(GUIVerificarReserva.class.getName()).log(Level.SEVERE, null, ex);
        }

        numeroReserva.setText("NÃºmero de reserva: " + reservaid);
        numeroReserva.setVisible(true);

        if (verificarExistenciaReserva(reservaid) == false) {
            panelQR.removeAll();
            JOptionPane.showMessageDialog(null, "No hay informaciÃ³n de esta reserva.");

        } else {
            reservaSeleccionada = Globales.controladorReserva.obtenerReservaQR(Datos.getListaReservas(), reservaid);
            campoCliente.setText(reservaSeleccionada.getReserva().getCliente().getNombre());
            campoCedula.setText(reservaSeleccionada.getReserva().getCliente().getCedula());
            campoFechaActual.setDate(reservaSeleccionada.getReserva().getFechaActual());
            campoFechaInicio.setDate(reservaSeleccionada.getReserva().getFechaInicio());
            campoFechaFin.setDate(reservaSeleccionada.getReserva().getFechaFinal());

            NodoHabitacion aux = reservaSeleccionada.getReserva().getListaHabitaciones().getPrimero();
            DefaultTableModel model = (DefaultTableModel) tablaHabitaciones.getModel();

            do {
                Object[] data = {aux.getHabitacion().getNumHabitacion() + "-" + aux.getHabitacion().getDescripcion()};
                model.addRow(data);
                aux = aux.getSiguiente();
            } while (aux.getSiguiente() != reservaSeleccionada.getReserva().getListaHabitaciones().getPrimero());
            // Object[] data = {aux.getHabitacion().getNumHabitacion() + "-" + aux.getHabitacion().getDescripcion()};
            /// model.addRow(data);
        }


    }//GEN-LAST:event_seleccionarQRBotonActionPerformed

    public boolean verificarHabitaciones(String itemCombo) {

        Object[] columnData = new Object[tablaHabitaciones.getRowCount()];
        Object[] rowData = new Object[tablaHabitaciones.getRowCount()];
        for (int i = 0; i < tablaHabitaciones.getRowCount(); i++) {

            if (itemCombo.equals(tablaHabitaciones.getValueAt(i, 0))) {
                return true;
            }

        }

        return false;
    }

    public boolean validarCampos() {

        if (campoFechaActual.getDate() == null || campoFechaInicio.getDate() == null || campoFechaFin.getDate() == null || campoCliente.getText().equals("") || campoCliente.getText().equals("") || tablaHabitaciones.getRowCount() == 0) {
            return true;
        }

        return false;
    }

    private void modificarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modificarReservaActionPerformed
        // TODO add your handling code here:

        Reserva r = new Reserva();
        ListaHabitacion lh = new ListaHabitacion();
        r.setNumeroReservacion(Integer.parseInt(reservaid));

        r.setFechaActual(campoFechaActual.getDate());
        r.setFechaInicio(campoFechaInicio.getDate());
        r.setFechaFinal(campoFechaFin.getDate());
        r.setCliente(new Cliente(campoCedula.getText(), campoCliente.getText()));

        Object[] columnData = new Object[tablaHabitaciones.getRowCount()];
        Object[] rowData = new Object[tablaHabitaciones.getRowCount()];
        for (int i = 0; i < tablaHabitaciones.getRowCount(); i++) {
            Habitacion h = new Habitacion();
            String[] splitfila
                    = tablaHabitaciones.getValueAt(i, 0).toString().split("-");
            h.setNumHabitacion(Integer.parseInt(splitfila[0]));
            Globales.controladorHabitacion.agregar(lh, h);

        }

        r.setListaHabitaciones(lh);

        try {
            if (validarCampos() == true) {
                JOptionPane.showMessageDialog(null, "Debe llenar todos los campos.");
            } else if (validarFechas() == true) {
                JOptionPane.showMessageDialog(null, "Las fechas se han ingresado incorrectamente.");
            } else if (Globales.controladorReserva.modificarArchivo("reservaciones.txt", r) == true) {
                JOptionPane.showMessageDialog(null, "Modificado con Ã©xito.");
                Datos.resetearListaReservas();
                Datos.iniciarListaReservas();
                this.dispose();
                new GUIReservas().setVisible(true);
                new LogicaReserva().imprimirLista(Datos.getListaReservas());
            } else {
                JOptionPane.showMessageDialog(null, "Error al agregar");
            }

        } catch (IOException ex) {
            Logger.getLogger(GUIVerificarReserva.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_modificarReservaActionPerformed

    private void seleccionarHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarHabitacionActionPerformed
        String[] habitaciones = comboHabitaciones.getSelectedItem().toString().split("-");

        if (comboHabitaciones.getSelectedItem().toString().equals("Seleccionar")) {
            JOptionPane.showMessageDialog(null, "Seleccione una habitaciÃ³n.");
        } else if (Globales.controladorReserva.verificarFechas(Datos.getListaReservas(), habitaciones[0], campoFechaInicio.getDate()) == true) {
            JOptionPane.showMessageDialog(null, "La habitaciÃ³n seleccionada, se encuentra reservada en esa fecha.");
        } else if (verificarHabitaciones(comboHabitaciones.getSelectedItem().toString()) == true) {
            JOptionPane.showMessageDialog(null, "Ya se agregÃ³");
        } else {
            modelHabitaciones.addRow(new Object[]{comboHabitaciones.getSelectedItem()});
        }


    }//GEN-LAST:event_seleccionarHabitacionActionPerformed

    private void removerHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerHabitacionActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tablaHabitaciones.getModel();

        if (diferenciaDias(campoFechaActual.getDate(), campoFechaInicio.getDate()) < 2) {
            JOptionPane.showMessageDialog(null, "No se puede cancelar la habitaciÃ³n seleccionada.");
        } else {
            if (tablaHabitaciones.getSelectedRow() != -1) {
                model.removeRow(tablaHabitaciones.getSelectedRow());
            }
        }

    }//GEN-LAST:event_removerHabitacionActionPerformed

    private void comboHabitacionesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHabitacionesActionPerformed
        // TODO add your handling code here:
        habitacionObtenida = comboHabitaciones.getSelectedItem().toString().split("-");

        NodoHabitacion nh = Globales.controladorHabitacion.obtenerHabitacionCombo(Integer.parseInt(habitacionObtenida[0]), Datos.getListaHabitaciones());
        descripcionHabitacion.setText("DescripciÃ³n: " + nh.getHabitacion().getDescripcion() + "\n"
                + "Precio: " + nh.getHabitacion().getPrecio() + "\n"
                + "Cantidad de personas: " + nh.getHabitacion().getCantidadPersonas()
        );
    }//GEN-LAST:event_comboHabitacionesActionPerformed

    public boolean eliminarFichero(File fichero) {

        if (!fichero.exists()) {
            System.out.println("El archivo data no existe.");
            return false;
        } else {
            fichero.delete();
            System.out.println("El archivo data fue eliminado.");
            return true;
        }

    }

    private void cancelarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarReservaActionPerformed

        try {
            if (Globales.controladorReserva.eliminarReservaArchivo("reservaciones.txt", reservaSeleccionada.getReserva()) == true && Globales.controladorReserva.archivarCancelado("cancelaciones.txt", reservaSeleccionada.getReserva())) {

                //elimina imagen qr
                if (imagenQR.exists()) {
                    imagenQR.delete();
                  
                } else {
                    
                }
                /* Path ruta = Paths.get(Globales.rutaGeneral + "\\img\\qr\\" + imagenQR.getName());

                 try {
                 Files.delete(ruta);
                 } catch (NoSuchFileException x) {
                 System.err.format("%s: no such" + " file or directory%n", ruta);
                 } catch (DirectoryNotEmptyException x) {
                 System.err.format("%s not empty%n", ruta);
                 } catch (IOException x) {

                 System.err.println(x);
                 }
                 */
                JOptionPane.showMessageDialog(null, "Cancelada con Ã©xito.");
                this.dispose();
                Datos.resetearListaReservas();
                Datos.iniciarListaReservas();
                Datos.resetearListaCanceladas();
                Datos.iniciarListaReservasCanceladas();
                new GUIReservas().setVisible(true);

            } else {
                JOptionPane.showMessageDialog(null, "No se pudo eliminar.");
            }
        } catch (IOException ex) {
            Logger.getLogger(GUIVerificarReserva.class.getName()).log(Level.SEVERE, null, ex);
        }
        new LogicaReserva().imprimirLista(Datos.getListaReservas());
    }//GEN-LAST:event_cancelarReservaActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIVerificarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIVerificarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIVerificarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIVerificarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIVerificarReserva().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField campoCedula;
    private javax.swing.JTextField campoCliente;
    private com.toedter.calendar.JDateChooser campoFechaActual;
    private com.toedter.calendar.JDateChooser campoFechaFin;
    private com.toedter.calendar.JDateChooser campoFechaInicio;
    private javax.swing.JButton cancelarReserva;
    private javax.swing.JComboBox<String> comboHabitaciones;
    private javax.swing.JTextArea descripcionHabitacion;
    private javax.swing.JLabel fechaActual;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton modificarReserva;
    private javax.swing.JLabel numeroReserva;
    private javax.swing.JPanel panelQR;
    private javax.swing.JButton removerHabitacion;
    private javax.swing.JButton seleccionarHabitacion;
    private javax.swing.JButton seleccionarQRBoton;
    private javax.swing.JTable tablaHabitaciones;
    // End of variables declaration//GEN-END:variables
}
