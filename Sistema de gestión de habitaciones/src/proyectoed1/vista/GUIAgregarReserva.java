/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyectoed1.vista;

import Atxy2k.CustomTextField.RestrictedTextField;
import com.google.zxing.WriterException;
import java.awt.Image;
import java.io.IOException;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import proyectoed1.modelo.datos.Datos;
import proyectoed1.modelo.datos.Globales;
import proyectoed1.modelo.dominio.Cliente;
import proyectoed1.modelo.dominio.Habitacion;
import proyectoed1.modelo.dominio.ListaHabitacion;
import proyectoed1.modelo.dominio.NodoHabitacion;
import proyectoed1.modelo.dominio.NodoReserva;
import proyectoed1.modelo.dominio.Reserva;
import proyectoed1.modelo.negocio.LogicaHabitacion;

/**
 *
 * @author adeve
 */
public class GUIAgregarReserva extends javax.swing.JFrame {

    private DefaultTableModel modelHabitaciones = new DefaultTableModel(Globales.columnaHabitacionSeleccionadas, 0);
    private String[] habitacionObtenida;

    public GUIAgregarReserva() {
        Datos.iniciarListaHabitaciones();
        Datos.iniciarListaReservas();
        this.setContentPane(new JLabel(new ImageIcon(new ImageIcon(Globales.rutaGeneral + "\\src\\proyectoed1\\vista\\icons\\wall1.jpg").getImage().getScaledInstance(809, 512, Image.SCALE_DEFAULT))));
        initComponents();
        
        campoFechaActual.setDate(new Date());
        campoFechaActual.setMinSelectableDate(new Date());
        campoFechaInicio.setMinSelectableDate(new Date());
        campoFechaFinal.setMinSelectableDate(new Date());
        cargarComboHabitaciones();
        restringirCampos();
        descripcionHabitacion.setEditable(false);
        tablaHabitacion.setModel(modelHabitaciones);
    }
    
    public void restringirCampos(){
        RestrictedTextField campo1 = new RestrictedTextField(campoCedula);
        RestrictedTextField campo2 = new RestrictedTextField(campoCliente);
        
        campo1.setOnlyNums(true);
        campo2.setAcceptSpace(true);
        campo2.setOnlyText(true);
        
        
    }
    
    
    
    public boolean validarCampos() {

        if (campoFechaActual.getDate() == null || campoFechaInicio.getDate() == null || campoFechaFinal.getDate() == null || campoCliente.getText().equals("") || campoCliente.getText().equals("") || tablaHabitacion.getRowCount() == 0) {
            return true;
        }

        return false;
    }

    public boolean verificarHabitaciones(String itemCombo) {

        Object[] columnData = new Object[tablaHabitacion.getRowCount()];
        Object[] rowData = new Object[tablaHabitacion.getRowCount()];
        for (int i = 0; i < tablaHabitacion.getRowCount(); i++) {

            if (itemCombo.equals(tablaHabitacion.getValueAt(i, 0))) {
                return true;
            }

        }

        return false;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fechaActual = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        campoFechaActual = new com.toedter.calendar.JDateChooser();
        campoFechaInicio = new com.toedter.calendar.JDateChooser();
        campoFechaFinal = new com.toedter.calendar.JDateChooser();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        campoCliente = new javax.swing.JTextField();
        campoCedula = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        comboHabitacion = new javax.swing.JComboBox<String>();
        jLabel8 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        descripcionHabitacion = new javax.swing.JTextArea();
        seleccionarHabitacion = new javax.swing.JButton();
        botonVerDetalle = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaHabitacion = new javax.swing.JTable();
        removerHabitacion = new javax.swing.JButton();
        agregarReserva = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Generar reserva");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        fechaActual.setText("Fecha actual:");

        jLabel1.setText("Fecha inicial:");

        jLabel2.setText("Fecha final:");

        campoFechaActual.setMinSelectableDate(new java.util.Date(-62135744331000L));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaActual)
                    .addComponent(jLabel2)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(campoFechaActual, javax.swing.GroupLayout.DEFAULT_SIZE, 193, Short.MAX_VALUE)
                    .addComponent(campoFechaInicio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(campoFechaFinal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(fechaActual)
                    .addComponent(campoFechaActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(campoFechaInicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2)
                    .addComponent(campoFechaFinal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel3.setText("Datos del cliente:");

        jLabel4.setText("Nombre completo:");

        jLabel5.setText("CÃ©dula:");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(campoCliente)
                            .addComponent(campoCedula, javax.swing.GroupLayout.DEFAULT_SIZE, 159, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(campoCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(campoCedula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel6.setText("Datos de habitaciÃ³n:");

        jLabel7.setText("Habitaciones:");

        comboHabitacion.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Seleccionar" }));
        comboHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboHabitacionActionPerformed(evt);
            }
        });

        jLabel8.setText("DescripciÃ³n:");

        descripcionHabitacion.setColumns(20);
        descripcionHabitacion.setRows(5);
        jScrollPane1.setViewportView(descripcionHabitacion);

        seleccionarHabitacion.setText("Seleccionar");
        seleccionarHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                seleccionarHabitacionActionPerformed(evt);
            }
        });

        botonVerDetalle.setText("Ver detalle");
        botonVerDetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botonVerDetalleActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(botonVerDetalle)
                .addGap(18, 18, 18)
                .addComponent(seleccionarHabitacion)
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(comboHabitacion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seleccionarHabitacion)
                    .addComponent(botonVerDetalle))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablaHabitacion.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tablaHabitacion);

        removerHabitacion.setText("Remover");
        removerHabitacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removerHabitacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 65, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 330, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removerHabitacion, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(removerHabitacion)))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        agregarReserva.setText("Agregar reserva");
        agregarReserva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                agregarReservaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(agregarReserva)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(agregarReserva)
                .addGap(23, 23, 23))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    public static boolean fechasIguales(Date date1, Date date2) {
        LocalDate localDate1 = date1.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        LocalDate localDate2 = date2.toInstant()
                .atZone(ZoneId.systemDefault())
                .toLocalDate();
        return localDate1.isEqual(localDate2);
    }

    public boolean validarFechas() {
        boolean verificar = false;

        if (campoFechaInicio.getDate().after(campoFechaFinal.getDate()) || campoFechaFinal.getDate().before(campoFechaInicio.getDate()) || fechasIguales(campoFechaInicio.getDate(), campoFechaFinal.getDate()) == true) {
            verificar = true;
        }

        return verificar;
    }

    private void agregarReservaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_agregarReservaActionPerformed
        // TODO add your handling code here:

        Reserva r = new Reserva();
        ListaHabitacion lh = new ListaHabitacion();

        if (validarCampos() == true) {
            JOptionPane.showMessageDialog(null, "Debe llenar todos los campos.");
        } else if (validarFechas() == true) {
            JOptionPane.showMessageDialog(null, "Las fechas se han ingresado incorrectamente.");
        } else {
            try {
                r.setNumeroReservacion(Globales.controladorReserva.obtenerNuevoID("reservaciones.txt") + 1);
            } catch (IOException ex) {
                Logger.getLogger(GUIAgregarReserva.class.getName()).log(Level.SEVERE, null, ex);
            }

            r.setFechaActual(campoFechaActual.getDate());
            r.setFechaInicio(campoFechaInicio.getDate());
            r.setFechaFinal(campoFechaFinal.getDate());
            r.setCliente(new Cliente(campoCedula.getText(), campoCliente.getText()));

            Object[] columnData = new Object[tablaHabitacion.getRowCount()];
            Object[] rowData = new Object[tablaHabitacion.getRowCount()];
            for (int i = 0; i < tablaHabitacion.getRowCount(); i++) {
                Habitacion h = new Habitacion();
                String[] splitfila
                        = tablaHabitacion.getValueAt(i, 0).toString().split("-");
                h.setNumHabitacion(Integer.parseInt(splitfila[0]));
                Globales.controladorHabitacion.agregar(lh, h);

            }

            r.setListaHabitaciones(lh);
            try {
                if (Globales.controladorReserva.agregar(Datos.getListaReservas(), r) == true && Globales.controladorReserva.archivar("reservaciones.txt", r) == true && Globales.controladorReserva.generarQR(r, Globales.rutaGeneral) == true) {
                    JOptionPane.showMessageDialog(null, "Agregado con Ã©xito.");
                    // Datos.resetearListaReservas();
                    //Datos.iniciarListaReservas();

                    this.dispose();
                    new GUIReservas().setVisible(true);

                    //  new LogicaReserva().imprimirLista(Datos.getListaReservas());
                } else {
                    JOptionPane.showMessageDialog(null, "Error al agregar");
                }
            } catch (IOException ex) {
                Logger.getLogger(GUIAgregarReserva.class.getName()).log(Level.SEVERE, null, ex);
            } catch (WriterException ex) {
                Logger.getLogger(GUIAgregarReserva.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

    }//GEN-LAST:event_agregarReservaActionPerformed

    private void seleccionarHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_seleccionarHabitacionActionPerformed

        String[] habitaciones = comboHabitacion.getSelectedItem().toString().split("-");

        if (comboHabitacion.getSelectedItem().toString().equals("Seleccionar")) {
            JOptionPane.showMessageDialog(null, "Seleccione una habitaciÃ³n.");
        } else if (Globales.controladorReserva.verificarFechas(Datos.getListaReservas(), habitaciones[0], campoFechaInicio.getDate()) == true) {
            JOptionPane.showMessageDialog(null, "La habitaciÃ³n seleccionada, se encuentra reservada en esa fecha.");
        } else if (verificarHabitaciones(comboHabitacion.getSelectedItem().toString()) == true) {
            JOptionPane.showMessageDialog(null, "Ya se agregÃ³");
        } else {
            modelHabitaciones.addRow(new Object[]{comboHabitacion.getSelectedItem()});
        }


    }//GEN-LAST:event_seleccionarHabitacionActionPerformed

    //verificar en todas las reservaciones si existe un habitacion con la fecha elegida
    public boolean validarFechaHabitacion(String habitacionID) {

        NodoReserva nr = Datos.getListaReservas().getPrimero(); // obtengo la primera reserva
        // nodo auxiliar para leer habitaciones de la reserva
        boolean verificar = false;
        while (nr != null) { //recorre las  reservas
            NodoHabitacion aux = nr.getReserva().getListaHabitaciones().getPrimero(); // el primero de la habitacion de la reserva
            while (aux.getSiguiente() != nr.getReserva().getListaHabitaciones().getPrimero()) { //recorre las habitaciones
                //verifica si existe esa habitacion y si existe una fecha de esa reserva 
                System.out.print("fecha en reserva" + nr.getReserva().getFechaInicio().toString());
                if (aux.getHabitacion().getNumHabitacion() == Integer.parseInt(habitacionID) && nr.getReserva().getFechaInicio().compareTo(campoFechaInicio.getDate()) == 0) {
                    verificar = true;
                }
                aux = aux.getSiguiente();

            }
            System.out.print("fecha en reserva" + nr.getReserva().getFechaInicio().toString());
            if (aux.getHabitacion().getNumHabitacion() == Integer.parseInt(habitacionID) && nr.getReserva().getFechaInicio().compareTo(campoFechaInicio.getDate()) == 0) {
                verificar = true;
            }

            nr = nr.getSiguiente();
        }
        return verificar;
    }

    public void cargarComboHabitaciones() {

        NodoHabitacion ne = Datos.getListaHabitaciones().getPrimero();
        while (ne.getSiguiente() != Datos.getListaHabitaciones().getPrimero()) {
            comboHabitacion.addItem(ne.getHabitacion().getNumHabitacion() + "-" + ne.getHabitacion().getDescripcion());
            ne = ne.getSiguiente();
        }
        comboHabitacion.addItem(ne.getHabitacion().getNumHabitacion() + "-" + ne.getHabitacion().getDescripcion());

    }

    private void removerHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removerHabitacionActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) tablaHabitacion.getModel();
        if (tablaHabitacion.getSelectedRow() != -1) {
            model.removeRow(tablaHabitacion.getSelectedRow());
        }
    }//GEN-LAST:event_removerHabitacionActionPerformed

    private void comboHabitacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboHabitacionActionPerformed
        // TODO add your handling code here:
        habitacionObtenida = comboHabitacion.getSelectedItem().toString().split("-");
        LogicaHabitacion lh = new LogicaHabitacion();
        NodoHabitacion nh = lh.obtenerHabitacionCombo(Integer.parseInt(habitacionObtenida[0]), Datos.getListaHabitaciones());
        descripcionHabitacion.setText("DescripciÃ³n: " + nh.getHabitacion().getDescripcion() + "\n"
                + "Precio: " + nh.getHabitacion().getPrecio() + "\n"
                + "Cantidad de personas: " + nh.getHabitacion().getCantidadPersonas()
        );
    }//GEN-LAST:event_comboHabitacionActionPerformed

    private void botonVerDetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botonVerDetalleActionPerformed

        new GUIVerDetalleHabitacion((habitacionObtenida[0])).setVisible(true);
    }//GEN-LAST:event_botonVerDetalleActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIAgregarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIAgregarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIAgregarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIAgregarReserva.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //  Datos.iniciarListaHabitaciones();
        // Datos.iniciarListaReservas();
        //boolean resultado = validarFechaHabitacion("1004");
        //System.out.print("ya existe?"+resultado);
        // Create and display the form 
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIAgregarReserva().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton agregarReserva;
    private javax.swing.JButton botonVerDetalle;
    private javax.swing.JTextField campoCedula;
    private javax.swing.JTextField campoCliente;
    private static com.toedter.calendar.JDateChooser campoFechaActual;
    private com.toedter.calendar.JDateChooser campoFechaFinal;
    private com.toedter.calendar.JDateChooser campoFechaInicio;
    private javax.swing.JComboBox<String> comboHabitacion;
    private javax.swing.JTextArea descripcionHabitacion;
    private javax.swing.JLabel fechaActual;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton removerHabitacion;
    private javax.swing.JButton seleccionarHabitacion;
    private javax.swing.JTable tablaHabitacion;
    // End of variables declaration//GEN-END:variables
}
